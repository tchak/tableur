// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client"
  output          = "../app/generated/prisma"
  runtime         = "bun"
  previewFeatures = ["postgresqlExtensions", "strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ColumnType {
  text
  number
  boolean
  date
  datetime
  file
  choice
  choiceList
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  email     String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  teams         TeamMembership[]
  organizations OrganizationMembership[]
  submissions   SubmissionMembership[]

  @@index([deletedAt])
  @@map("users")
}

model Organization {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  sequence OrganizationTableSequence?

  teams  Team[]
  tables Table[]
  paths  FormPath[]
  users  OrganizationMembership[]

  @@index([deletedAt])
  @@map("organizations")
}

model Team {
  id             String    @id @default(uuid()) @db.Uuid
  name           String
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  organizationId String    @map("organization_id") @db.Uuid

  organization Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submissions  Submission[]
  users        TeamMembership[]

  @@index([organizationId])
  @@index([deletedAt])
  @@map("teams")
}

model TeamMembership {
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  userId    String    @map("user_id") @db.Uuid
  teamId    String    @map("team_id") @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([deletedAt])
  @@map("team_memberships")
}

model OrganizationMembership {
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  userId         String    @map("user_id") @db.Uuid
  organizationId String    @map("organization_id") @db.Uuid

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@index([deletedAt])
  @@map("organization_memberships")
}

model SubmissionMembership {
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  userId       String    @map("user_id") @db.Uuid
  submissionId String    @map("submission_id") @db.Uuid

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@id([userId, submissionId])
  @@index([deletedAt])
  @@map("submission_memberships")
}

model OrganizationTableSequence {
  organizationId  String @id @map("organization_id") @db.Uuid
  lastTableNumber Int    @default(1) @map("last_table_number")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("organization_table_sequences")
}

model Table {
  id             String    @id @default(uuid()) @db.Uuid
  number         Int
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  name           String
  description    String?
  organizationId String    @map("organization_id") @db.Uuid

  sequence     TableRowSequence?
  organization Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  columns      Column[]
  options      ChoiceOption[]
  rows         Row[]
  submissions  Submission[]

  forms    Form[]
  pages    FormPage[]
  sections FormSection[]
  fields   FormField[]

  cells Cell[]

  @@unique([organizationId, number])
  @@index([deletedAt])
  @@map("tables")
}

model ChoiceOption {
  id        String    @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  name      String
  position  Float
  columnId  String    @map("column_id") @db.Uuid
  tableId   String    @map("table_id") @db.Uuid

  column Column @relation(fields: [tableId, columnId], references: [tableId, id], onDelete: Cascade)
  table  Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@id([tableId, columnId, id])
  @@index([deletedAt])
  @@map("choice_options")
}

model Column {
  id        String     @db.Uuid
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  name      String
  type      ColumnType @default(text)
  position  Float
  tableId   String     @map("table_id") @db.Uuid

  table   Table          @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells   Cell[]
  fields  FormField[]
  options ChoiceOption[]

  @@id([tableId, id])
  @@index([deletedAt])
  @@map("columns")
}

model TableRowSequence {
  tableId       String @id @map("table_id") @db.Uuid
  lastRowNumber Int    @default(1) @map("last_row_number")

  table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@map("table_row_sequences")
}

model Row {
  id         String    @id @default(uuid()) @db.Uuid
  number     Int
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  searchText String?   @map("search_text")
  data       Json?
  tableId    String    @map("table_id") @db.Uuid

  table      Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells      Cell[]
  submission Submission?

  @@unique([tableId, number])
  @@index([deletedAt])
  @@index([tableId])
  @@map("rows")
}

model Cell {
  updatedBy String
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  branch    String
  rowId     String   @map("row_id") @db.Uuid
  columnId  String   @map("column_id") @db.Uuid
  tableId   String   @map("table_id") @db.Uuid
  data      Json

  table  Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  row    Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column Column @relation(fields: [tableId, columnId], references: [tableId, id], onDelete: Cascade)

  @@id([rowId, columnId, branch])
  @@index([rowId, branch])
  @@map("cells")
}

model Form {
  id          String    @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  name        String
  description String?
  tableId     String    @map("table_id") @db.Uuid

  table       Table         @relation(fields: [tableId], references: [id], onDelete: Cascade)
  submissions Submission[]
  pages       FormPage[]
  sections    FormSection[]
  fields      FormField[]
  paths       FormPath[]

  @@id([tableId, id])
  @@index([deletedAt])
  @@map("forms")
}

model FormPath {
  id             String   @id @default(uuid()) @db.Uuid
  path           String   @unique
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  tableId        String?  @map("table_id") @db.Uuid
  formId         String?  @map("form_id") @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  form         Form?        @relation(fields: [tableId, formId], references: [tableId, id], onDelete: Cascade)

  @@index([organizationId])
  @@index([tableId, formId])
  @@map("form_paths")
}

model FormPage {
  id        String    @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  tableId   String    @map("table_id") @db.Uuid
  formId    String    @map("form_id") @db.Uuid
  position  Float
  condition Json?

  table    Table         @relation(fields: [tableId], references: [id], onDelete: Cascade)
  form     Form          @relation(fields: [tableId, formId], references: [tableId, id], onDelete: Cascade)
  sections FormSection[]

  @@id([tableId, formId, id])
  @@index([deletedAt])
  @@map("form_pages")
}

model FormSection {
  id          String    @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  tableId     String    @map("table_id") @db.Uuid
  formId      String    @map("form_id") @db.Uuid
  pageId      String    @map("page_id") @db.Uuid
  parentId    String?   @map("parent_id") @db.Uuid
  position    Float
  title       String
  description String?
  condition   Json?

  table    Table         @relation(fields: [tableId], references: [id], onDelete: Cascade)
  form     Form          @relation(fields: [tableId, formId], references: [tableId, id], onDelete: Cascade)
  page     FormPage      @relation(fields: [tableId, formId, pageId], references: [tableId, formId, id], onDelete: Cascade)
  parent   FormSection?  @relation("section", fields: [tableId, formId, parentId], references: [tableId, formId, id], onDelete: Cascade)
  sections FormSection[] @relation("section")
  fields   FormField[]

  @@id([tableId, formId, id])
  @@index([deletedAt])
  @@map("form_sections")
}

model FormField {
  id          String    @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  tableId     String    @map("table_id") @db.Uuid
  formId      String    @map("form_id") @db.Uuid
  sectionId   String    @map("section_id") @db.Uuid
  label       String
  position    Float
  required    Boolean
  description String?
  condition   Json?

  table   Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  form    Form        @relation(fields: [tableId, formId], references: [tableId, id], onDelete: Cascade)
  section FormSection @relation(fields: [tableId, formId, sectionId], references: [tableId, formId, id], onDelete: Cascade)
  column  Column      @relation(fields: [tableId, id], references: [tableId, id], onDelete: Cascade)

  @@id([tableId, formId, id])
  @@index([deletedAt])
  @@map("form_fields")
}

enum SubmissionState {
  draft
  submitted
}

model Submission {
  id          String          @id @default(uuid()) @db.Uuid
  number      Int
  state       SubmissionState @default(draft)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime?       @map("deleted_at")
  submittedAt DateTime?       @map("submitted_at")
  formId      String          @map("form_id") @db.Uuid
  tableId     String          @map("table_id") @db.Uuid
  rowId       String?         @unique @map("row_id") @db.Uuid
  teamId      String?         @map("team_id") @db.Uuid

  users SubmissionMembership[]
  table Table                  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  form  Form                   @relation(fields: [tableId, formId], references: [tableId, id], onDelete: Cascade)
  team  Team?                  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  row   Row?                   @relation(fields: [rowId], references: [id], onDelete: Cascade)

  @@index([tableId, formId])
  @@index([deletedAt])
  @@map("submissions")
}

model FileStorageBlob {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  checksum  String
  size      BigInt
  mimeType  String   @map("mime_type")
  filename  String
  key       String   @unique

  attachments FileStorageAttachment[]

  @@index([key])
  @@map("file_storage_blobs")
}

model FileStorageAttachment {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  target    String
  blobId    String   @map("blob_id") @db.Uuid

  blob FileStorageBlob @relation(fields: [blobId], references: [id], onDelete: Restrict)

  @@unique([target, blobId])
  @@index([blobId])
  @@map("file_storage_attachments")
}
